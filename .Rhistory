head(mpg)
library(tidyverse)
head(mpg)
plt <- ggplot(mpg,aes(x=class))
plt + geom_bar()
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count))
plt + geom_col()
> plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset")
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset")
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") +
theme(axis.text.x=element_text(angle=45,hjust=1))
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class))
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class")
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine))
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") +
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine))
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy))
head(mpg)
head(mpg_long)
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in class){
print(student)
}
}
roll_call(students)
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
sample(33,3)
}
locker_combinations()
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (student in class){
print(student)
sample(33,3)
}
}
locker_combinations()
locker_combinations(students)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (student in class){
print(student)
print(sample(33,3))
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring1 <- substring(student,2,2)
print(substring1)}
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring1 <- substring(student,2,2)
print(substring1)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (substring1 == 'e'){
print(student)
}
}
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (student in class){
cat(student," ",sample(33,3))
}
}
# Call the function with the s
locker_combinations(students)
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (student in class){
cat(student," ",sample(33,3), "\n")
}
}
locker_combinations(students)
knitr::opts_chunk$set(echo = TRUE)
r
clearPushBack()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
students <-read_csv("students.csv")
head(students)
# unique(dataset, variable) displays unique elements from that column
unique(students)$student_name
# unique(dataset, variable) displays unique elements from that column
unique(students$student_name)
# unique(dataset, variable) displays unique elements from that column
unique(students$school_name)
students <-read_csv("students.csv")
attach(students)
# unique(dataset, variable) displays unique elements from that column
unique(school_name)
# unique(dataset, variable) displays unique elements from that column
unique_schools <- unique(school_name)
# Use length() to identify the number of schools
length(unique_schools)
# nrow() returns the number of rows
student_count <- nrow(students)
paste("There are a total of", student_count, "students.")
mean_reading_score <- summarize(students, mean(math_score))
paste("The average reading score is", mean_reading_score)
paste("The average math score is", mean_math_score)
mean_reading_score <- summarize(students, mean(math_score))
paste("The average reading score is", mean_reading_score)
paste("The average math score is", mean_math_score)
mean_reading_score <- summarize(students, mean(reading_score))
paste("The average reading score is", mean_reading_score)
mean_math_score <- summarize(students, mean(math_score))
paste("The average math score is", mean_math_score)
mean_reading_score <- summarize(students, mean(reading_score))
paste("The average reading score is", mean_reading_score)
mean_math_score <- summarize(students, round(mean(math_score)),2)
paste("The average math score is", mean_math_score)
mean_reading_score <- summarize(students, mean(reading_score))
paste("The average reading score is", mean_reading_score)
mean_math_score <- summarize(students, round(mean(math_score),2))
paste("The average math score is", mean_math_score)
percentage_passing_reading <- (nrow(filter(students, reading_score >= 70))/39170)*100
paste(percentage_passing_reading, "% of the students have passing reading scores.")
percentage_passing_reading <- round((nrow(filter(students, reading_score >= 70))/39170)*100,2)
paste(percentage_passing_reading, "% of the students have passing reading scores.")
percentage_passing_math<- round((nrow(filter(students, math_score >= 70))/39170)*100,2)
paste(percentage_passing_math, "% of the students have passing math scores.")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
library(tidyverse)
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F)
sample_table <- population_table %>% sample_n(50)
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven)))
sample_table2 <- population_table %>% sample_n(50)
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T) #compare the mean difference between two samples
mtcars_filt <- mtcars[,c("hp","cyl")] #filter columns from mtcars dataset
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
aov(hp ~ cyl,data=mtcars_filt) #compare means across multiple levels
summary(aov(hp ~ cyl,data=mtcars_filt))
head(mtcars)
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() #create scatter plot
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price)) #import dataset into ggplot2
plt + geom_point() #create a scatter plot
cor(used_cars$Miles_Driven,used_cars$Selling_Price) #calculate correlation coefficient
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into numeric matrix
cor(used_matrix)
lm(qsec ~ hp,mtcars) #create linear model
summary(lm(qsec~hp,mtcars)) #summarize linear model
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
sardines <- read.csv(file="03-Stu_Sardines/Resources/sardines.csv")
sardines <- read.csv(file="03-Stu_Sardines/Resources/sardines.csv")
sardines <- read.csv(file="../Resources/sardines.csv")
#deliverable 1 : generate multiple linear regression model
library(dplyr)
library(tidyverse)
MechaCar_mpg <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
setwd("~/Rutgers/R_Analysis/MechaCar_Statistical_Analysis")
#deliverable 1 : generate multiple linear regression model
library(dplyr)
library(tidyverse)
MechaCar_mpg <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
head(MechaCar_mpg)
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=MechaCar_mpg)
summary(lm(mpg ~ vehicle_length + vehicle_length + spoiler_angle + ground_clearance + AWD,data=MechaCar_mpg))
#deliverable 2 : Create Visualizations for the Trip Analysis
Suspension_Coil <- read.csv(file='Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
head(Suspension_Coil)
total_summary <- summarize(Suspension_Coil, Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI))
view(total_summary)
lot_summary <- Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI),.groups = 'keep')
view(lot_summary)
#deliverable 3: T-Tests on Suspension Coils
t.test(Suspension_Coil$PSI,mu=1500)
lot1 <- subset(Suspension_Coil, Manufacturing_Lot=="Lot1")
lot2 <- subset(Suspension_Coil, Manufacturing_Lot=="Lot2")
lot3 <- subset(Suspension_Coil, Manufacturing_Lot=="Lot3")
t.test(lot1$PSI,mu=1500)
t.test(lot2$PSI,mu=1500)
t.test(lot3$PSI,mu=1500)
